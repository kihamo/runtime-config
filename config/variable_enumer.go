// Code generated by "enumer -type=VariableType -trimprefix=VariableType -output=variable_enumer.go -transform=snake"; DO NOT EDIT.

package config

import (
	"fmt"
)

const _VariableTypeName = "boolintint64uintuint64float64durationstr"

var _VariableTypeIndex = [...]uint8{0, 4, 7, 12, 16, 22, 29, 37, 40}

func (i VariableType) String() string {
	if i < 0 || i >= VariableType(len(_VariableTypeIndex)-1) {
		return fmt.Sprintf("VariableType(%d)", i)
	}
	return _VariableTypeName[_VariableTypeIndex[i]:_VariableTypeIndex[i+1]]
}

var _VariableTypeValues = []VariableType{0, 1, 2, 3, 4, 5, 6, 7}

var _VariableTypeNameToValueMap = map[string]VariableType{
	_VariableTypeName[0:4]:   0,
	_VariableTypeName[4:7]:   1,
	_VariableTypeName[7:12]:  2,
	_VariableTypeName[12:16]: 3,
	_VariableTypeName[16:22]: 4,
	_VariableTypeName[22:29]: 5,
	_VariableTypeName[29:37]: 6,
	_VariableTypeName[37:40]: 7,
}

// VariableTypeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func VariableTypeString(s string) (VariableType, error) {
	if val, ok := _VariableTypeNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to VariableType values", s)
}

// VariableTypeValues returns all values of the enum
func VariableTypeValues() []VariableType {
	return _VariableTypeValues
}

// IsAVariableType returns "true" if the value is listed in the enum definition. "false" otherwise
func (i VariableType) IsAVariableType() bool {
	for _, v := range _VariableTypeValues {
		if i == v {
			return true
		}
	}
	return false
}
